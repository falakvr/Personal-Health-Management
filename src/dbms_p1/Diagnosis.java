/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dbms_p1;

import static dbms_p1.AddObservation.getCurrentTimeStamp;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author falak
 */
public class Diagnosis extends javax.swing.JFrame {

    public static ArrayList<String> dnames = new ArrayList<String>();

    /**
     * Creates new form Diagnosis
     */
    public Diagnosis() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        back = new javax.swing.JButton();
        add = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        diseaseTable = new javax.swing.JTable();
        addDisease = new javax.swing.JTextField();
        delete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Diagnoses");

        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        dTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Disease Name"
            }
        ));
        jScrollPane1.setViewportView(dTable);

        diseaseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "List of Diseases"
            }
        ));
        jScrollPane2.setViewportView(diseaseTable);

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(248, 248, 248)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(190, 190, 190))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addDisease, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(80, 80, 80))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addDisease, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(add)
                    .addComponent(delete))
                .addGap(80, 80, 80)
                .addComponent(back)
                .addContainerGap(251, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        Patient patient = new Patient();
        patient.setVisible(true);
        
    }//GEN-LAST:event_backActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        String newDisease = addDisease.getText().toString().replaceAll("\\s+","");
        String countHS = "";
        String isSick = "";
        String hsid1 = "";
        String hsid2 = "";
        String currentTimestamp = getCurrentTimeStamp();
        try
        {
            System.out.println(newDisease + ";"+ Setup.loginuserid);
            String dummy = "Insert into Diagnosis values ('"
                    + newDisease+"', '"+Setup.loginuserid+"')";
            System.out.println(dummy);
            Setup.stmt.executeUpdate(dummy);
            //String storedProc = "{call Check_rec_Patient()}";
            //Setup.stmt.execute(storedProc);
            
            String query_count = "SELECT COUNT(*) AS CountHS FROM Health_Supporter WHERE "
                    + "patient_id = '" + Setup.loginuserid + "'";
            Setup.rs = Setup.stmt.executeQuery(query_count);
            while(Setup.rs.next()){
                countHS = Setup.rs.getString("CountHS");
            }
            
            String query_sick = "SELECT is_sick FROM Patient WHERE "
                    + "user_id = '" + Setup.loginuserid + "'";
            Setup.rs = Setup.stmt.executeQuery(query_sick);
            while(Setup.rs.next()){
                isSick = Setup.rs.getString("is_sick");
            }
            
            if(countHS.equals("0")){
                JOptionPane.showMessageDialog(null, "No health supporter. Add a health supporter");
            } else if ( (countHS.equals("1") || countHS.equals("2")) && isSick.equals("N") ){
                String query_update_patient = "UPDATE Patient SET is_sick = 'Y' WHERE"
                        + " user_id = '" + Setup.loginuserid + "'";
                Setup.stmt.executeUpdate(query_update_patient);
                
                String query_extractHS = "SELECT hs_id1, hs_id2 FROM Well_patient WHERE "
                        + "user_id = '" + Setup.loginuserid + "'";
                Setup.rs = Setup.stmt.executeQuery(query_extractHS);
                while(Setup.rs.next()){
                    hsid1 = Setup.rs.getString("hs_id1");
                    hsid2 = Setup.rs.getString("hs_id2");
                }
                
                String query_insert = "INSERT INTO Sick_patient VALUES('"
                        + Setup.loginuserid + "','" + hsid1 + "','" + hsid2 + "', TO_DATE('" + currentTimestamp + "', 'YYYY-MM-DD HH24:MI:SS'))";
                Setup.stmt.executeUpdate(query_insert);
                
                String query_delete = "DELETE FROM Well_patient WHERE "
                        + "user_id = '" + Setup.loginuserid + "'";
                Setup.stmt.executeUpdate(query_delete);
                
            }
            
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        this.setVisible(false);
        Patient p = new Patient();
        p.setVisible(true);
    }//GEN-LAST:event_addActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        
        String newDisease = addDisease.getText().toString().replaceAll("\\s+","");
        String count_diag = "";
        String hsid1 = "";
        String hsid2 = "";
        try
        {
            String dummy = "Delete from Diagnosis where patient_id ='"
                    + Setup.loginuserid + "' and dname = '" + newDisease + "'";
            System.out.println(dummy);
            Setup.stmt.executeUpdate(dummy);
            
            String query_count_diag = "SELECT COUNT(*) AS CountDiag FROM Diagnosis WHERE "
                    + "patient_id = '" + Setup.loginuserid + "'";
            Setup.rs = Setup.stmt.executeQuery(query_count_diag);
            while(Setup.rs.next()){
                count_diag = Setup.rs.getString("CountDiag");
            }
            if (count_diag.equals("0")){
                String query_update_patient = "UPDATE Patient SET is_sick = 'N' WHERE"
                        + " user_id = '" + Setup.loginuserid + "'";
                Setup.stmt.executeUpdate(query_update_patient);
                
                String query_extractHS = "SELECT hs_id1, hs_id2 FROM Sick_patient WHERE "
                        + "user_id = '" + Setup.loginuserid + "'";
                Setup.rs = Setup.stmt.executeQuery(query_extractHS);
                while(Setup.rs.next()){
                    hsid1 = Setup.rs.getString("hs_id1");
                    hsid2 = Setup.rs.getString("hs_id2");
                }
                
                String query_insert = "INSERT INTO Well_patient VALUES('"
                        + Setup.loginuserid + "','" + hsid1 + "','" + hsid2 + "')";
                Setup.stmt.executeUpdate(query_insert);
                
                String query_delete = "DELETE FROM Sick_patient WHERE "
                        + "user_id = '" + Setup.loginuserid + "'";
                Setup.stmt.executeUpdate(query_delete);
                
            }
        }
        catch(SQLException e)
        {   
            JOptionPane.showMessageDialog(null, e);
        }
        this.setVisible(false);
        Patient p = new Patient();
        p.setVisible(true);         
    }//GEN-LAST:event_deleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
//        diseaseTable.addMouseListener(new MouseAdapter() {
//            public void mouseClicked(MouseEvent e) {
//                if (e.getClickCount() == 2) {
//                    JTable target = (JTable) e.getSource();
//                    int row = target.getSelectedRow();
//                    int column = target.getSelectedColumn();
//                    // do some action if appropriate column
//                }
//            }
//        });

        //</editor-fold>
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JTextField addDisease;
    private javax.swing.JButton back;
    public javax.swing.JTable dTable;
    private javax.swing.JButton delete;
    public javax.swing.JTable diseaseTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
